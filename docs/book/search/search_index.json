{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started with IQRFBB-10 IQRFBB-10 board is a node of IQRF network. In this tutorial we will demonstrate how to connect board into IQRF network and make any sensor or actuator from it. Then we will connect the device to IQRF gateway software and show you many examples how to read or send data from your software. Links IQRFBB-10 Presentation & Orders IQRFBB-10 GitHub pages IQRFBB-10 Data Sheet IQRFBB-10 Board Schema IQRFBB-10 Hardware Drawing TR-76D Data Sheet Prepare IQRF network Firs check IQRF network around you. If you do not have any, let's start with SetupIqrfNetwork . Assemble Board JP1: OFF JP6: OFF Insert IQRF TR into board Connect Programmer Unplug USB cable from CK-USB-04A Make wiring Plug micro-USB to IQRFBB-10 to power-on. Indication LD1=ON (charging battery), LD4=ON Plug micro-USB to CK-USB-04A Load Software If we are talking about software loading, we always mean loading to IQRF transciever TR-76D mounted on IQRFBB-10. Now we will configure board (transciever) as a node of IQRF network. Make sure you made a proper wiring and both USB power sources (programmer + board) are on. Now you can upload node configuration as described in preparation of your IQRF network chapter . Do not put any IQRF module into CK-USB-04A programmer SIM! Uploading data into transciever is sihnalized by LD3 diod on IQRFBB-10 board. Unplug micro USB of CK-USB-04A programmer Unplug micro USB of IQRFBB-10 board. Unplug CK-USB-04A from IQRFBB-10. Bond to Network Bonding IQRF nodes is generally described here... , bonding IQRFBB-10 board goes this way: Turn on battery power JP6 = ON . Diod indicating power on is LD4 = ON . Turn TR module power JP1 = ON . Open IDE, then menu start Tools/IQMESH Network Manager and fill out the dialogue as shown (TX power, Auto address, ...). Then pres Clear All Bonds for remove any previous bonded modules. Red diods of modules are blinking, at IQRFBB-10 it is diod LD3 . Then pres Bond Node and during bonding period press and hold SW1 button at one node until green diod turns on. Repeat for each node. At IQRFBB-10 the SW1 is an external contact EQ12, GND , red diod is LD3 and green diods is LD2 . Now you should see yellow spots indicating successful bonding. Now click Discovery and spots are in blue. Switch in IDE to Map View and you should see node structure something like in the picture. Try to turn on LD3 (RED diod) on IQRFBB-10 board. Click rigt mouse button on spot indicating board (it depends on the bonding order) and select LED Red On . Then the LD3 = ON on the board. Check Operability Now you have fully configured IQRFBB-10 board. You can check operability this way: Battery power turn on/off is always done via JP6 . When you power board on, then it is always automatically connected to the IQRF network (if you properly did all steps above). For checking of connectivity open IDE and in IQMESH Network Manager , view Control click Discovery button. Working nodes are displayed in blue spots, previously bonded but inactive are shown as yellow spots. Switch to Map View , find IQRF-BB10 node (one of blue spheres) and try to turn on LD3 (RED diod) on IQRFBB-10 board. Right click mouse button on spot indicating board and select LED Red On . Then the LD3 = ON on the board. Examples Then turn the IQRFBB-10 board into any wireless sensor or actuator with many examples","title":"GettingStarted"},{"location":"#getting-started-with-iqrfbb-10","text":"IQRFBB-10 board is a node of IQRF network. In this tutorial we will demonstrate how to connect board into IQRF network and make any sensor or actuator from it. Then we will connect the device to IQRF gateway software and show you many examples how to read or send data from your software.","title":"Getting Started with IQRFBB-10"},{"location":"#links","text":"IQRFBB-10 Presentation & Orders IQRFBB-10 GitHub pages IQRFBB-10 Data Sheet IQRFBB-10 Board Schema IQRFBB-10 Hardware Drawing TR-76D Data Sheet","title":"Links"},{"location":"#prepare-iqrf-network","text":"Firs check IQRF network around you. If you do not have any, let's start with SetupIqrfNetwork .","title":"Prepare IQRF network"},{"location":"#assemble-board","text":"JP1: OFF JP6: OFF Insert IQRF TR into board","title":"Assemble Board"},{"location":"#connect-programmer","text":"Unplug USB cable from CK-USB-04A Make wiring Plug micro-USB to IQRFBB-10 to power-on. Indication LD1=ON (charging battery), LD4=ON Plug micro-USB to CK-USB-04A","title":"Connect Programmer"},{"location":"#load-software","text":"If we are talking about software loading, we always mean loading to IQRF transciever TR-76D mounted on IQRFBB-10. Now we will configure board (transciever) as a node of IQRF network. Make sure you made a proper wiring and both USB power sources (programmer + board) are on. Now you can upload node configuration as described in preparation of your IQRF network chapter . Do not put any IQRF module into CK-USB-04A programmer SIM! Uploading data into transciever is sihnalized by LD3 diod on IQRFBB-10 board. Unplug micro USB of CK-USB-04A programmer Unplug micro USB of IQRFBB-10 board. Unplug CK-USB-04A from IQRFBB-10.","title":"Load Software"},{"location":"#bond-to-network","text":"Bonding IQRF nodes is generally described here... , bonding IQRFBB-10 board goes this way: Turn on battery power JP6 = ON . Diod indicating power on is LD4 = ON . Turn TR module power JP1 = ON . Open IDE, then menu start Tools/IQMESH Network Manager and fill out the dialogue as shown (TX power, Auto address, ...). Then pres Clear All Bonds for remove any previous bonded modules. Red diods of modules are blinking, at IQRFBB-10 it is diod LD3 . Then pres Bond Node and during bonding period press and hold SW1 button at one node until green diod turns on. Repeat for each node. At IQRFBB-10 the SW1 is an external contact EQ12, GND , red diod is LD3 and green diods is LD2 . Now you should see yellow spots indicating successful bonding. Now click Discovery and spots are in blue. Switch in IDE to Map View and you should see node structure something like in the picture. Try to turn on LD3 (RED diod) on IQRFBB-10 board. Click rigt mouse button on spot indicating board (it depends on the bonding order) and select LED Red On . Then the LD3 = ON on the board.","title":"Bond to Network"},{"location":"#check-operability","text":"Now you have fully configured IQRFBB-10 board. You can check operability this way: Battery power turn on/off is always done via JP6 . When you power board on, then it is always automatically connected to the IQRF network (if you properly did all steps above). For checking of connectivity open IDE and in IQMESH Network Manager , view Control click Discovery button. Working nodes are displayed in blue spots, previously bonded but inactive are shown as yellow spots. Switch to Map View , find IQRF-BB10 node (one of blue spheres) and try to turn on LD3 (RED diod) on IQRFBB-10 board. Right click mouse button on spot indicating board and select LED Red On . Then the LD3 = ON on the board.","title":"Check Operability"},{"location":"#examples","text":"Then turn the IQRFBB-10 board into any wireless sensor or actuator with many examples","title":"Examples"},{"location":"About/","text":"About IQRFBB-10 project is powered by www.logimic.com Orders & Project Presentation logimic.com/iqrfboard Licensing All content in the repository is licensed via the MIT license","title":"About"},{"location":"About/#about","text":"IQRFBB-10 project is powered by www.logimic.com Orders & Project Presentation logimic.com/iqrfboard","title":"About"},{"location":"About/#licensing","text":"All content in the repository is licensed via the MIT license","title":"Licensing"},{"location":"IqrfGatewayDaemon/","text":"IQRF Gateway Daemon IQRF network is hidden behind coordinator connected to your computer via USB, SPI, UART or other types of interface. Communication between your program and coordinator is ensured via IQRF Gateway Daemon software module. This is Open Source gateway piece of software for communicating (sending and receiving JSON API messages) with IQRF network. This is included in many IQRF gateways and you can also download it and build for your platform. In releases of this repo we prepared build for Win developers. Download sources: https://gitlab.iqrfsdk.org/gateway/iqrf-daemon Download releases: https://github.com/logimic/iqrfboard/releases Documentation: https://docs.iqrfsdk.org/iqrf-gateway-daemon/ Demon provides many software interface channels: WebSockets MQTT MQ interprocess Every channel can be used for sending/receiving JSON API messages. Full API is described here: https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html Run Daemon Please follow instructions at releases: https://github.com/logimic/iqrfboard/releases WebSockets JSON API WebSockets port is opened during start o Daemon. The number of port is defined in IqrfDaemon\\runcfg\\iqrfgd2-WinCdc\\configuration\\iqrf__WebsocketMessaging.json . You can change it, but please do not forget to restart Daemon then. Html WebSocket example Open html page https://github.com/logimic/iqrfboard/blob/master/tools/index-1338.html Enter message: { \"mType\": \"iqrfEmbedLedg_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": 0, \"param\": { \"onOff\": true } }, \"returnVerbose\": true } } Press Send in html page and see that this turned on the LED diod on concentrator module. Similar way you can turn LED off: ```json { \"mType\": \"iqrfEmbedLedg_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": 0, \"param\": { \"onOff\": false } }, \"returnVerbose\": true } } * Similarly for other nodes by changing **nAdr** parameter indicating the node address. * Full API description can be found here: https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html ### Python 3.6 WebSocket example * Install ```pip install websockets``` * Write simple program **[GreenLedOn.py](tools/GreenLedOn.py)** ```py # WS client example import asyncio import websockets import json x = { \"mType\": \"iqrfEmbedLedg_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": 0, \"param\": { \"onOff\": True } }, \"returnVerbose\": False } } async def hello(): async with websockets.connect( 'ws://localhost:1338') as websocket: await websocket.send(json.dumps(x)) print(f\"Sent > {x}\") greeting = await websocket.recv() print(f\"Received < {greeting}\") asyncio.get_event_loop().run_until_complete(hello()) Run it $ py ./GreenLedOn.py and the green LED on coordinator turns on. Changing nAdr will address command to other node, the \"onOff\": False will turn LED off. Full API description can be found here: https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html","title":"IQRF Gateway Daemon"},{"location":"IqrfGatewayDaemon/#iqrf-gateway-daemon","text":"IQRF network is hidden behind coordinator connected to your computer via USB, SPI, UART or other types of interface. Communication between your program and coordinator is ensured via IQRF Gateway Daemon software module. This is Open Source gateway piece of software for communicating (sending and receiving JSON API messages) with IQRF network. This is included in many IQRF gateways and you can also download it and build for your platform. In releases of this repo we prepared build for Win developers. Download sources: https://gitlab.iqrfsdk.org/gateway/iqrf-daemon Download releases: https://github.com/logimic/iqrfboard/releases Documentation: https://docs.iqrfsdk.org/iqrf-gateway-daemon/ Demon provides many software interface channels: WebSockets MQTT MQ interprocess Every channel can be used for sending/receiving JSON API messages. Full API is described here: https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html","title":"IQRF Gateway Daemon"},{"location":"IqrfGatewayDaemon/#run-daemon","text":"Please follow instructions at releases: https://github.com/logimic/iqrfboard/releases","title":"Run Daemon"},{"location":"IqrfGatewayDaemon/#websockets-json-api","text":"WebSockets port is opened during start o Daemon. The number of port is defined in IqrfDaemon\\runcfg\\iqrfgd2-WinCdc\\configuration\\iqrf__WebsocketMessaging.json . You can change it, but please do not forget to restart Daemon then.","title":"WebSockets JSON API"},{"location":"IqrfGatewayDaemon/#html-websocket-example","text":"Open html page https://github.com/logimic/iqrfboard/blob/master/tools/index-1338.html Enter message: { \"mType\": \"iqrfEmbedLedg_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": 0, \"param\": { \"onOff\": true } }, \"returnVerbose\": true } } Press Send in html page and see that this turned on the LED diod on concentrator module. Similar way you can turn LED off: ```json { \"mType\": \"iqrfEmbedLedg_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": 0, \"param\": { \"onOff\": false } }, \"returnVerbose\": true } } * Similarly for other nodes by changing **nAdr** parameter indicating the node address. * Full API description can be found here: https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html ### Python 3.6 WebSocket example * Install ```pip install websockets``` * Write simple program **[GreenLedOn.py](tools/GreenLedOn.py)** ```py # WS client example import asyncio import websockets import json x = { \"mType\": \"iqrfEmbedLedg_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": 0, \"param\": { \"onOff\": True } }, \"returnVerbose\": False } } async def hello(): async with websockets.connect( 'ws://localhost:1338') as websocket: await websocket.send(json.dumps(x)) print(f\"Sent > {x}\") greeting = await websocket.recv() print(f\"Received < {greeting}\") asyncio.get_event_loop().run_until_complete(hello()) Run it $ py ./GreenLedOn.py and the green LED on coordinator turns on. Changing nAdr will address command to other node, the \"onOff\": False will turn LED off. Full API description can be found here: https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html","title":"Html WebSocket example"},{"location":"SetupIqrfNetwork/","text":"Setup IQRF Network Start building your IQRF network with DS-START-04 development kit. Links Order here The Content of the Starter Kit IQRF Quick Start Guide CK-USB-04A , online page... ...check for updates Install IDE IDE is a basic programming tool for IQRF devices. Download and install https://www.iqrf.org/technology/iqrf-ide/iqrf-ide-gui Install IQRF Startup Package Download IQRF Startup package and unpack anywhere to your hard drive. First Start Start your IDE, navigate to your installed IQRF Startup package e.g. d:\\IQRF_OS403_7xD\\Examples\\DPA\\StartUp and open HWP-demo.iqrfprj Insert any IQRF module to programmer CK-USB-04A and connect to PC via USB. In IDE you will probably see USB device not connected in bottom panel. Go to menu Tools/USB Classes/Swith to Custom Device mode and select listed COM (USB) port. If you do not see any port please follow troubleshooting on IQRF support. You need driver update. Successful selection will show dialogue like this. Click Switch and the bottom panel will show Module ready - communication mode It might show dialogue about firmware update, then click Yes . Click Upload button, wait for firmware update, then press Close . Configure Coordinator A Concentrator is the node connected with PC or Gateway gathering data from all nodes. ! When you insert or remove TR from holder, always press SW2 button (nearer to SIM slot). It breaks power. In left panel check HWP-Coordinator-...iqrf file Double click on DPA-config.xml in left panel. Set items in dialogue as picture shows and click Upload button. In menu select Programming/Upload/Upload Selected Items . If the system complains that uploading version is not for the connected TR module, please upgrade OS in module. See Upgrade OS in TR module section. Configure Nodes A Node is a module communication within mesh with Concentrator. ! When you insert or remove TR from holder, always press SW2 button (nearer to SIM slot). It breaks power. Insert TR module to be node into programmer In left panel of IDE check HWP-Node-STD-... Keep the DPA-config.xml settings as previously at concentrator. Upload all your nodes. If the system complains that uploading version is not for the connected TR module, please upgrade OS in module. See Upgrade OS in TR module section. Upgrade OS in modules In menu select Tools/Change IQRF OS Wizard and follow wizard. Use SPI as upload method. Then select version to be uploaded !If your modules are older you might need to repeat the upgrade OS more times Run Network Insert coordinator configured TR module to programmer CK-USB-04A and nodes to other DK-EVAL-04A modules. In IDE in menu start Tools/IQMESH Network Manager and fill out the dialogue as shown (TX power, Auto address, ...). Then pres Clear All Bonds for remove any previous bonded modules. Red diods of modules are blinking. Then pres Bond Node and during bonding period press and hold SW1 button at one node until green red turns on. Repeat for each node. Now you should see two spots indicating successful bonding. Now click Discovery and spots are in blue. Switch in IDE to Map View and you should see node structure Click right mouse button on node 1 and select LED Red On Now you can see that the RED LED of node 1 is on. In similar way you can turn-off or play with LEDs. Send DPA messages Direct Peripheral Access (DPA) protocol is a simple byte-oriented protocol used to control nodes and network. Detail description of DPA Framework DPA can be sent via IDE. Open Terminal and click Set LEDR on which prefills data into Data to send fields. Change only NADR=0001 which indicates node 1 and click Send . This DPA command turned on RED diod on node 1. You can define any other DPA messages.","title":"Setup IQRF Network"},{"location":"SetupIqrfNetwork/#setup-iqrf-network","text":"Start building your IQRF network with DS-START-04 development kit.","title":"Setup IQRF Network"},{"location":"SetupIqrfNetwork/#links","text":"Order here The Content of the Starter Kit IQRF Quick Start Guide CK-USB-04A , online page... ...check for updates","title":"Links"},{"location":"SetupIqrfNetwork/#install-ide","text":"IDE is a basic programming tool for IQRF devices. Download and install https://www.iqrf.org/technology/iqrf-ide/iqrf-ide-gui","title":"Install IDE"},{"location":"SetupIqrfNetwork/#install-iqrf-startup-package","text":"Download IQRF Startup package and unpack anywhere to your hard drive.","title":"Install IQRF Startup Package"},{"location":"SetupIqrfNetwork/#first-start","text":"Start your IDE, navigate to your installed IQRF Startup package e.g. d:\\IQRF_OS403_7xD\\Examples\\DPA\\StartUp and open HWP-demo.iqrfprj Insert any IQRF module to programmer CK-USB-04A and connect to PC via USB. In IDE you will probably see USB device not connected in bottom panel. Go to menu Tools/USB Classes/Swith to Custom Device mode and select listed COM (USB) port. If you do not see any port please follow troubleshooting on IQRF support. You need driver update. Successful selection will show dialogue like this. Click Switch and the bottom panel will show Module ready - communication mode It might show dialogue about firmware update, then click Yes . Click Upload button, wait for firmware update, then press Close .","title":"First Start"},{"location":"SetupIqrfNetwork/#configure-coordinator","text":"A Concentrator is the node connected with PC or Gateway gathering data from all nodes. ! When you insert or remove TR from holder, always press SW2 button (nearer to SIM slot). It breaks power. In left panel check HWP-Coordinator-...iqrf file Double click on DPA-config.xml in left panel. Set items in dialogue as picture shows and click Upload button. In menu select Programming/Upload/Upload Selected Items . If the system complains that uploading version is not for the connected TR module, please upgrade OS in module. See Upgrade OS in TR module section.","title":"Configure Coordinator"},{"location":"SetupIqrfNetwork/#configure-nodes","text":"A Node is a module communication within mesh with Concentrator. ! When you insert or remove TR from holder, always press SW2 button (nearer to SIM slot). It breaks power. Insert TR module to be node into programmer In left panel of IDE check HWP-Node-STD-... Keep the DPA-config.xml settings as previously at concentrator. Upload all your nodes. If the system complains that uploading version is not for the connected TR module, please upgrade OS in module. See Upgrade OS in TR module section.","title":"Configure Nodes"},{"location":"SetupIqrfNetwork/#upgrade-os-in-modules","text":"In menu select Tools/Change IQRF OS Wizard and follow wizard. Use SPI as upload method. Then select version to be uploaded !If your modules are older you might need to repeat the upgrade OS more times","title":"Upgrade OS in modules"},{"location":"SetupIqrfNetwork/#run-network","text":"Insert coordinator configured TR module to programmer CK-USB-04A and nodes to other DK-EVAL-04A modules. In IDE in menu start Tools/IQMESH Network Manager and fill out the dialogue as shown (TX power, Auto address, ...). Then pres Clear All Bonds for remove any previous bonded modules. Red diods of modules are blinking. Then pres Bond Node and during bonding period press and hold SW1 button at one node until green red turns on. Repeat for each node. Now you should see two spots indicating successful bonding. Now click Discovery and spots are in blue. Switch in IDE to Map View and you should see node structure Click right mouse button on node 1 and select LED Red On Now you can see that the RED LED of node 1 is on. In similar way you can turn-off or play with LEDs.","title":"Run Network"},{"location":"SetupIqrfNetwork/#send-dpa-messages","text":"Direct Peripheral Access (DPA) protocol is a simple byte-oriented protocol used to control nodes and network. Detail description of DPA Framework DPA can be sent via IDE. Open Terminal and click Set LEDR on which prefills data into Data to send fields. Change only NADR=0001 which indicates node 1 and click Send . This DPA command turned on RED diod on node 1. You can define any other DPA messages.","title":"Send DPA messages"},{"location":"examples/","text":"Examples 1. LED2, LED3 on board /example-led23 , this example simple turns on/off RED and GREEN diods on the IQRFBB-10 board. This is first hello world example. 2. Digital Input /example-di , this example shows how to detect digital input. 3. Digital Output /example-do , this example shows how to HI/LO digital output. The DO has connected external LED. 4. Hall Magnetic Sensor /example-hall , this example shows how to connect Hall Magentic Sensor with the board and detect event. 5. Motion detection (ePir) /example-ePir , this example shows how to connect motion sensor ePir to the board and detect event. 6. Bi-stable relay on board /example-bistable-relay , this example shows how to switch bi-stable relay on board. 7. Temperature & Barometric Pressure Sensor Comming soon GY-BME280... 8. Temperature & Humidity Sensor Comming soon HTU21D... 9. Ambient Light Sensor Comming soon GY49...","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#1-led2-led3-on-board","text":"/example-led23 , this example simple turns on/off RED and GREEN diods on the IQRFBB-10 board. This is first hello world example.","title":"1. LED2, LED3 on board"},{"location":"examples/#2-digital-input","text":"/example-di , this example shows how to detect digital input.","title":"2. Digital Input"},{"location":"examples/#3-digital-output","text":"/example-do , this example shows how to HI/LO digital output. The DO has connected external LED.","title":"3. Digital Output"},{"location":"examples/#4-hall-magnetic-sensor","text":"/example-hall , this example shows how to connect Hall Magentic Sensor with the board and detect event.","title":"4. Hall Magnetic Sensor"},{"location":"examples/#5-motion-detection-epir","text":"/example-ePir , this example shows how to connect motion sensor ePir to the board and detect event.","title":"5. Motion detection (ePir)"},{"location":"examples/#6-bi-stable-relay-on-board","text":"/example-bistable-relay , this example shows how to switch bi-stable relay on board.","title":"6. Bi-stable relay on board"},{"location":"examples/#7-temperature-barometric-pressure-sensor","text":"Comming soon GY-BME280...","title":"7. Temperature &amp; Barometric Pressure Sensor"},{"location":"examples/#8-temperature-humidity-sensor","text":"Comming soon HTU21D...","title":"8. Temperature &amp; Humidity Sensor"},{"location":"examples/#9-ambient-light-sensor","text":"Comming soon GY49...","title":"9. Ambient Light Sensor"},{"location":"examples/example-bistable-relay/","text":"Bi-stable relay This example turns bistable relay on/off. Prerequisities IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example Hardware wiring No hardware wiring needed, bistable relay is managed via C1 and C2 signals. See. Documentation Software We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ14 as DO. EQ14 is Q14/C1/RA0 pin on TR-76DA. Set EQ15 as DO. EQ15 is Q15/C2/RC2 pin on TR-76DA. Set C2=LO, C1=HI Wait 3secs Set C2=HI, C1=LO API JSON message We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 - 00.01.00 Set C1 Output XXXX 09 00 - 02.04.00 Set C2 Output XXXX 09 01 - 00.01.01 Set C1 ON XXXX 09 01 - 00.01.00 Set C1 OFF XXXX 09 01 - 02.04.04 Set C2 ON XXXX 09 01 - 02.04.00 Set C2 OFF NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format. Testing Software The example-bistable-relay.py script. # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-bistable-relay.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" C1_OUT = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [0, 1, 0] }, \"returnVerbose\": True } } C1_ON = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [0, 1, 1] }, \"returnVerbose\": True } } C1_OFF = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [0, 1, 0] }, \"returnVerbose\": True } } C2_OUT = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [2, 4, 0] }, \"returnVerbose\": True } } C2_ON = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 4, 4] }, \"returnVerbose\": True } } C2_OFF = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 4, 0] }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set C1 OUT await websocket.send(json.dumps(C1_OUT)) print(f\"Sent > {C1_OUT}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C2 OUT await websocket.send(json.dumps(C2_OUT)) print(f\"Sent > {C2_OUT}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C2 OFF await websocket.send(json.dumps(C2_OFF)) print(f\"Sent > {C2_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C1 ON await websocket.send(json.dumps(C1_ON)) print(f\"Sent > {C1_ON}\") response = await websocket.recv() print(f\"Received < {response}\") print(\"Waiting 3 secs then reswitch...\") # Wait 3 sec time.sleep(3) # Set C1 OFF await websocket.send(json.dumps(C1_OFF)) print(f\"Sent > {C1_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C2 ON await websocket.send(json.dumps(C2_ON)) print(f\"Sent > {C1_ON}\") response = await websocket.recv() print(f\"Received < {response}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Bi-stable relay"},{"location":"examples/example-bistable-relay/#bi-stable-relay","text":"This example turns bistable relay on/off.","title":"Bi-stable relay"},{"location":"examples/example-bistable-relay/#prerequisities","text":"IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example","title":"Prerequisities"},{"location":"examples/example-bistable-relay/#hardware-wiring","text":"No hardware wiring needed, bistable relay is managed via C1 and C2 signals. See. Documentation","title":"Hardware wiring"},{"location":"examples/example-bistable-relay/#software","text":"We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ14 as DO. EQ14 is Q14/C1/RA0 pin on TR-76DA. Set EQ15 as DO. EQ15 is Q15/C2/RC2 pin on TR-76DA. Set C2=LO, C1=HI Wait 3secs Set C2=HI, C1=LO","title":"Software"},{"location":"examples/example-bistable-relay/#api-json-message","text":"We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 - 00.01.00 Set C1 Output XXXX 09 00 - 02.04.00 Set C2 Output XXXX 09 01 - 00.01.01 Set C1 ON XXXX 09 01 - 00.01.00 Set C1 OFF XXXX 09 01 - 02.04.04 Set C2 ON XXXX 09 01 - 02.04.00 Set C2 OFF NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format.","title":"API JSON message"},{"location":"examples/example-bistable-relay/#testing-software","text":"The example-bistable-relay.py script. # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-bistable-relay.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" C1_OUT = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [0, 1, 0] }, \"returnVerbose\": True } } C1_ON = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [0, 1, 1] }, \"returnVerbose\": True } } C1_OFF = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [0, 1, 0] }, \"returnVerbose\": True } } C2_OUT = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [2, 4, 0] }, \"returnVerbose\": True } } C2_ON = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 4, 4] }, \"returnVerbose\": True } } C2_OFF = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 4, 0] }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set C1 OUT await websocket.send(json.dumps(C1_OUT)) print(f\"Sent > {C1_OUT}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C2 OUT await websocket.send(json.dumps(C2_OUT)) print(f\"Sent > {C2_OUT}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C2 OFF await websocket.send(json.dumps(C2_OFF)) print(f\"Sent > {C2_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C1 ON await websocket.send(json.dumps(C1_ON)) print(f\"Sent > {C1_ON}\") response = await websocket.recv() print(f\"Received < {response}\") print(\"Waiting 3 secs then reswitch...\") # Wait 3 sec time.sleep(3) # Set C1 OFF await websocket.send(json.dumps(C1_OFF)) print(f\"Sent > {C1_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C2 ON await websocket.send(json.dumps(C2_ON)) print(f\"Sent > {C1_ON}\") response = await websocket.recv() print(f\"Received < {response}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Testing Software"},{"location":"examples/example-di/","text":"Digital Input This example shows how to detect DI on board. We will detect connection EQ13 pin to GRND. DI status is tested by testing software via reading all inputs. Prerequisities IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example Hardware wiring Fig.: IQRFBB10 schema Fig.: External LED wiring Connect EQ13 and GRND pins via button. Software We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ13 as DI. EQ13 is Q13/RE3 pin on TR-76DA. Ask user to press an hold button Wait 3sec Read all DI Parse response and make decision API JSON message We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 10.08.08 Set RE3 (Address E3) as DI XXXX 09 02 FFFF Read all DI pins NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format. Testing Software The example-di.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-di.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" EQ13_IN = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [16, 8, 8] }, \"returnVerbose\": True } } READ_ALL = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 2 }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set C1 OUT await websocket.send(json.dumps(EQ13_IN)) print(f\"Sent > {EQ13_IN}\") response = await websocket.recv() print(f\"Received < {response}\") # Read all pins await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") print(\"Connect EQ13 to GND...\") # Wait 2 sec time.sleep(3) # Read all pins again await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") # Parse JSON response data = json.loads(response) pData = data[\"data\"][\"rsp\"][\"pData\"] button = pData[4] # Check input detection if button == 8: print(f\"Input NOT detected: {button}\") else: print(f\"!!!Input detected: {button}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Digital Input"},{"location":"examples/example-di/#digital-input","text":"This example shows how to detect DI on board. We will detect connection EQ13 pin to GRND. DI status is tested by testing software via reading all inputs.","title":"Digital Input"},{"location":"examples/example-di/#prerequisities","text":"IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example","title":"Prerequisities"},{"location":"examples/example-di/#hardware-wiring","text":"Fig.: IQRFBB10 schema Fig.: External LED wiring Connect EQ13 and GRND pins via button.","title":"Hardware wiring"},{"location":"examples/example-di/#software","text":"We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ13 as DI. EQ13 is Q13/RE3 pin on TR-76DA. Ask user to press an hold button Wait 3sec Read all DI Parse response and make decision","title":"Software"},{"location":"examples/example-di/#api-json-message","text":"We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 10.08.08 Set RE3 (Address E3) as DI XXXX 09 02 FFFF Read all DI pins NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format.","title":"API JSON message"},{"location":"examples/example-di/#testing-software","text":"The example-di.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-di.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" EQ13_IN = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [16, 8, 8] }, \"returnVerbose\": True } } READ_ALL = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 2 }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set C1 OUT await websocket.send(json.dumps(EQ13_IN)) print(f\"Sent > {EQ13_IN}\") response = await websocket.recv() print(f\"Received < {response}\") # Read all pins await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") print(\"Connect EQ13 to GND...\") # Wait 2 sec time.sleep(3) # Read all pins again await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") # Parse JSON response data = json.loads(response) pData = data[\"data\"][\"rsp\"][\"pData\"] button = pData[4] # Check input detection if button == 8: print(f\"Input NOT detected: {button}\") else: print(f\"!!!Input detected: {button}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Testing Software"},{"location":"examples/example-do/","text":"Digital Output This example shows how to set DO on board. We will power EQ6 (X10 SCL) pin. Prerequisities IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example Hardware wiring Fig.: IQRFBB10 schema Fig.: External LED wiring Connect EQ13 and GRN pins via button. Software We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ6 (X10 SCL) as DO. EQ16 is Q6, C6/RC3 genral I/O pin on TR-76DA. Set pin HI Wait 3sec Set pin LO API JSON message We will use DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 02.08.00 Set RC3 (Address C3) as D0 XXXX 09 01 FFFF 02.08.08 Set pin HI XXXX 09 01 FFFF 02.08.00 Set pin LO NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format. Testing Software The example-di.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-do.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" RC3_OUT = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [2, 8, 0] }, \"returnVerbose\": True } } RC3_ON = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 8, 8] }, \"returnVerbose\": True } } RC3_OFF = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 8, 0] }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set RC3 OUT await websocket.send(json.dumps(RC3_OUT)) print(f\"Sent > {RC3_OUT}\") response = await websocket.recv() print(f\"Received < {response}\") # Set RC3 ON await websocket.send(json.dumps(RC3_ON)) print(f\"Sent > {RC3_ON}\") response = await websocket.recv() print(f\"Received < {response}\") print(\"RC3 power ON...\") # Wait 2 sec time.sleep(3) # Read all pins await websocket.send(json.dumps(RC3_OFF)) print(f\"Sent > {RC3_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Digital Output"},{"location":"examples/example-do/#digital-output","text":"This example shows how to set DO on board. We will power EQ6 (X10 SCL) pin.","title":"Digital Output"},{"location":"examples/example-do/#prerequisities","text":"IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example","title":"Prerequisities"},{"location":"examples/example-do/#hardware-wiring","text":"Fig.: IQRFBB10 schema Fig.: External LED wiring Connect EQ13 and GRN pins via button.","title":"Hardware wiring"},{"location":"examples/example-do/#software","text":"We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ6 (X10 SCL) as DO. EQ16 is Q6, C6/RC3 genral I/O pin on TR-76DA. Set pin HI Wait 3sec Set pin LO","title":"Software"},{"location":"examples/example-do/#api-json-message","text":"We will use DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 02.08.00 Set RC3 (Address C3) as D0 XXXX 09 01 FFFF 02.08.08 Set pin HI XXXX 09 01 FFFF 02.08.00 Set pin LO NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format.","title":"API JSON message"},{"location":"examples/example-do/#testing-software","text":"The example-di.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-do.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" RC3_OUT = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [2, 8, 0] }, \"returnVerbose\": True } } RC3_ON = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 8, 8] }, \"returnVerbose\": True } } RC3_OFF = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 8, 0] }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set RC3 OUT await websocket.send(json.dumps(RC3_OUT)) print(f\"Sent > {RC3_OUT}\") response = await websocket.recv() print(f\"Received < {response}\") # Set RC3 ON await websocket.send(json.dumps(RC3_ON)) print(f\"Sent > {RC3_ON}\") response = await websocket.recv() print(f\"Received < {response}\") print(\"RC3 power ON...\") # Wait 2 sec time.sleep(3) # Read all pins await websocket.send(json.dumps(RC3_OFF)) print(f\"Sent > {RC3_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Testing Software"},{"location":"examples/example-ePir/","text":"Motion Sensor (ePir) This example shows how to connect Zilog ePIR \u2013 SparkFub \u2013 SEN-09587 to the board. Prerequisities IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example Hardware wiring Fig.: IQRFBB10 schema Fig.: External LED wiring Connect VO, EQ13 and GRND pins with Zilog ePIR \u2013 SparkFub \u2013 SEN-09587 . Software We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ13 as DI. EQ13 is Q13/RE3 pin on TR-76DA. Read all DI in the loop Parse response and make decision API JSON message We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 10.08.08 Set RE3 (Address E3) as DI XXXX 09 02 FFFF Read all DI pins NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format. Testing Software The example-ePir.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-ePir.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" EQ13_IN = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [16, 8, 8] }, \"returnVerbose\": True } } READ_ALL = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 2 }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set EQ13 IN await websocket.send(json.dumps(EQ13_IN)) print(f\"Sent > {EQ13_IN}\") response = await websocket.recv() print(f\"Received < {response}\") count = 0 detected = False while (count < 20 and detected == False): print (f\"The count is:{count}\") count = count + 1 # Read all pins await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") # Parse JSON response data = json.loads(response) pData = data[\"data\"][\"rsp\"][\"pData\"] button = pData[4] # Check input detection if button == 0: detected = True # Check input detection if detected == False: print(f\"NOTHING detected :(\") else: print(f\"Motion detected!!! :)\") asyncio.get_event_loop().run_until_complete(hello())","title":"Motion Sensor (ePir)"},{"location":"examples/example-ePir/#motion-sensor-epir","text":"This example shows how to connect Zilog ePIR \u2013 SparkFub \u2013 SEN-09587 to the board.","title":"Motion Sensor (ePir)"},{"location":"examples/example-ePir/#prerequisities","text":"IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example","title":"Prerequisities"},{"location":"examples/example-ePir/#hardware-wiring","text":"Fig.: IQRFBB10 schema Fig.: External LED wiring Connect VO, EQ13 and GRND pins with Zilog ePIR \u2013 SparkFub \u2013 SEN-09587 .","title":"Hardware wiring"},{"location":"examples/example-ePir/#software","text":"We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ13 as DI. EQ13 is Q13/RE3 pin on TR-76DA. Read all DI in the loop Parse response and make decision","title":"Software"},{"location":"examples/example-ePir/#api-json-message","text":"We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 10.08.08 Set RE3 (Address E3) as DI XXXX 09 02 FFFF Read all DI pins NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format.","title":"API JSON message"},{"location":"examples/example-ePir/#testing-software","text":"The example-ePir.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-ePir.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" EQ13_IN = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [16, 8, 8] }, \"returnVerbose\": True } } READ_ALL = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 2 }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set EQ13 IN await websocket.send(json.dumps(EQ13_IN)) print(f\"Sent > {EQ13_IN}\") response = await websocket.recv() print(f\"Received < {response}\") count = 0 detected = False while (count < 20 and detected == False): print (f\"The count is:{count}\") count = count + 1 # Read all pins await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") # Parse JSON response data = json.loads(response) pData = data[\"data\"][\"rsp\"][\"pData\"] button = pData[4] # Check input detection if button == 0: detected = True # Check input detection if detected == False: print(f\"NOTHING detected :(\") else: print(f\"Motion detected!!! :)\") asyncio.get_event_loop().run_until_complete(hello())","title":"Testing Software"},{"location":"examples/example-hall/","text":"Hall Magnetic Sensor This example shows how to connect KS0020 Hall Magnetic Sensor with the board. Prerequisities IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example Hardware wiring Fig.: IQRFBB10 schema Fig.: External LED wiring Connect VO, EQ13 and GRND pins with KS0020 Keyestudio Hall Magnetic Sensor . Software We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ13 as DI. EQ13 is Q13/RE3 pin on TR-76DA. Read all DI in the loop Parse response and make decision API JSON message We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 10.08.08 Set RE3 (Address E3) as DI XXXX 09 02 FFFF Read all DI pins NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format. Testing Software The example-di.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-hall.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" EQ13_IN = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [16, 8, 8] }, \"returnVerbose\": True } } READ_ALL = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 2 }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set EQ13 IN await websocket.send(json.dumps(EQ13_IN)) print(f\"Sent > {EQ13_IN}\") response = await websocket.recv() print(f\"Received < {response}\") count = 0 detected = False while (count < 20 and detected == False): print (f\"The count is:{count}\") count = count + 1 # Read all pins await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") # Parse JSON response data = json.loads(response) pData = data[\"data\"][\"rsp\"][\"pData\"] button = pData[4] # Check input detection if button == 0: detected = True # Check input detection if detected == False: print(f\"NOTHING detected :(\") else: print(f\"Input detected!!! :)\") asyncio.get_event_loop().run_until_complete(hello())","title":"Hall Magnetic Sensor"},{"location":"examples/example-hall/#hall-magnetic-sensor","text":"This example shows how to connect KS0020 Hall Magnetic Sensor with the board.","title":"Hall Magnetic Sensor"},{"location":"examples/example-hall/#prerequisities","text":"IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example","title":"Prerequisities"},{"location":"examples/example-hall/#hardware-wiring","text":"Fig.: IQRFBB10 schema Fig.: External LED wiring Connect VO, EQ13 and GRND pins with KS0020 Keyestudio Hall Magnetic Sensor .","title":"Hardware wiring"},{"location":"examples/example-hall/#software","text":"We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ13 as DI. EQ13 is Q13/RE3 pin on TR-76DA. Read all DI in the loop Parse response and make decision","title":"Software"},{"location":"examples/example-hall/#api-json-message","text":"We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 10.08.08 Set RE3 (Address E3) as DI XXXX 09 02 FFFF Read all DI pins NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format.","title":"API JSON message"},{"location":"examples/example-hall/#testing-software","text":"The example-di.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-hall.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" EQ13_IN = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [16, 8, 8] }, \"returnVerbose\": True } } READ_ALL = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 2 }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set EQ13 IN await websocket.send(json.dumps(EQ13_IN)) print(f\"Sent > {EQ13_IN}\") response = await websocket.recv() print(f\"Received < {response}\") count = 0 detected = False while (count < 20 and detected == False): print (f\"The count is:{count}\") count = count + 1 # Read all pins await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") # Parse JSON response data = json.loads(response) pData = data[\"data\"][\"rsp\"][\"pData\"] button = pData[4] # Check input detection if button == 0: detected = True # Check input detection if detected == False: print(f\"NOTHING detected :(\") else: print(f\"Input detected!!! :)\") asyncio.get_event_loop().run_until_complete(hello())","title":"Testing Software"},{"location":"examples/example-led23/","text":"Set LED2, LED3 on/off This example turns RED LED on, waits 2 seconds, then turns RED LED off and GREEN LED on, then after 2 seconds turns GREEN LED off. Prerequisities IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example Hardware wiring No hardware wiring needed, both LED2 and LED3 are mounted on the board and connected to C1 and C2. See. Documentation Software We use Standard DPA handler already loaded in board TR module. API JSON message We can manage diods via sending Daemon JSON API messages. LD2 (Green DIOD) ON/OFF Set LEDG request v1-0-0 , ..example Set LEDG response v1-0-0 , ..example LD3 (Red DIOD) ON/OFF Set LEDR request v1-0-0 , ..example Set LEDR response v1-0-0 , ..example Testing Software The example-led23.py script also prints sent and received JSON messages # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-led23.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" LEDR_ON = { \"mType\": \"iqrfEmbedLedr_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": True } }, \"returnVerbose\": True } } LEDR_OFF = { \"mType\": \"iqrfEmbedLedr_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": False } }, \"returnVerbose\": True } } LEDG_ON = { \"mType\": \"iqrfEmbedLedg_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": True } }, \"returnVerbose\": True } } LEDG_OFF = { \"mType\": \"iqrfEmbedLedg_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": False } }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # RED LED ON await websocket.send(json.dumps(LEDR_ON)) print(f\"Sent > {LEDR_ON}\") response = await websocket.recv() print(f\"Received < {response}\") # Wait 2 sec time.sleep(2) # RED LED OFF await websocket.send(json.dumps(LEDR_OFF)) print(f\"Sent > {LEDR_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") # GREEN LED ON await websocket.send(json.dumps(LEDG_ON)) print(f\"Sent > {LEDG_ON}\") response = await websocket.recv() print(f\"Received < {response}\") # Wait 2 sec time.sleep(2) # GREEN LED OFF await websocket.send(json.dumps(LEDG_OFF)) print(f\"Sent > {LEDG_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Set LED2, LED3 on/off"},{"location":"examples/example-led23/#set-led2-led3-onoff","text":"This example turns RED LED on, waits 2 seconds, then turns RED LED off and GREEN LED on, then after 2 seconds turns GREEN LED off.","title":"Set LED2, LED3 on/off"},{"location":"examples/example-led23/#prerequisities","text":"IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example","title":"Prerequisities"},{"location":"examples/example-led23/#hardware-wiring","text":"No hardware wiring needed, both LED2 and LED3 are mounted on the board and connected to C1 and C2. See. Documentation","title":"Hardware wiring"},{"location":"examples/example-led23/#software","text":"We use Standard DPA handler already loaded in board TR module.","title":"Software"},{"location":"examples/example-led23/#api-json-message","text":"We can manage diods via sending Daemon JSON API messages. LD2 (Green DIOD) ON/OFF Set LEDG request v1-0-0 , ..example Set LEDG response v1-0-0 , ..example LD3 (Red DIOD) ON/OFF Set LEDR request v1-0-0 , ..example Set LEDR response v1-0-0 , ..example","title":"API JSON message"},{"location":"examples/example-led23/#testing-software","text":"The example-led23.py script also prints sent and received JSON messages # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-led23.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" LEDR_ON = { \"mType\": \"iqrfEmbedLedr_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": True } }, \"returnVerbose\": True } } LEDR_OFF = { \"mType\": \"iqrfEmbedLedr_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": False } }, \"returnVerbose\": True } } LEDG_ON = { \"mType\": \"iqrfEmbedLedg_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": True } }, \"returnVerbose\": True } } LEDG_OFF = { \"mType\": \"iqrfEmbedLedg_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": False } }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # RED LED ON await websocket.send(json.dumps(LEDR_ON)) print(f\"Sent > {LEDR_ON}\") response = await websocket.recv() print(f\"Received < {response}\") # Wait 2 sec time.sleep(2) # RED LED OFF await websocket.send(json.dumps(LEDR_OFF)) print(f\"Sent > {LEDR_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") # GREEN LED ON await websocket.send(json.dumps(LEDG_ON)) print(f\"Sent > {LEDG_ON}\") response = await websocket.recv() print(f\"Received < {response}\") # Wait 2 sec time.sleep(2) # GREEN LED OFF await websocket.send(json.dumps(LEDG_OFF)) print(f\"Sent > {LEDG_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Testing Software"}]}