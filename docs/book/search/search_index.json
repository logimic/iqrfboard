{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IQRFBB-10 Development Board Powered for you by logimic.com IQRF development board helps you to design IQRF wireless devices like sensors and actuators. Just connect sensors, load software and you get fully working IQRF prototype of device. IQRF Board Repository layout Getting Started with IQRFBB-10 shows how to configure IQRF network, how to configure and connect IQRFBB-10 board into IQRF network and how to verify proper connectivity. Application examples are hardware and software projects that you can use in your development for free. You are getting many working examples. Documentation like data sheets, drawings, guidelines etc... How to buy Order.. IQRFBB-10 Logimic IQRFBB-10 Development Board TR-76DA transciever. * Cabling Order.. DS-START-04 You need this device if you do not have any working IQRF network. Licensing All content in the repository is licensed via the MIT license","title":"[IQRFBB-10 Development Board](http://logimic.com/iqrfboard)"},{"location":"#iqrfbb-10-development-board","text":"Powered for you by logimic.com IQRF development board helps you to design IQRF wireless devices like sensors and actuators. Just connect sensors, load software and you get fully working IQRF prototype of device.","title":"IQRFBB-10 Development Board"},{"location":"#iqrf-board-repository-layout","text":"Getting Started with IQRFBB-10 shows how to configure IQRF network, how to configure and connect IQRFBB-10 board into IQRF network and how to verify proper connectivity. Application examples are hardware and software projects that you can use in your development for free. You are getting many working examples. Documentation like data sheets, drawings, guidelines etc...","title":"IQRF Board Repository layout"},{"location":"#how-to-buy","text":"Order.. IQRFBB-10 Logimic IQRFBB-10 Development Board TR-76DA transciever. * Cabling Order.. DS-START-04 You need this device if you do not have any working IQRF network.","title":"How to buy"},{"location":"#licensing","text":"All content in the repository is licensed via the MIT license","title":"Licensing"},{"location":"examples/","text":"Examples 1. LED2, LED3 on board /example-led23 , this example simple turns on/off RED and GREEN diods on the IQRFBB-10 board. This is first hello world example. 2. Digital Input /example-di , this example shows how to detect digital input. 3. Digital Output /example-do , this example shows how to HI/LO digital output. The DO has connected external LED. 4. Hall Magnetic Sensor /example-hall , this example shows how to connect Hall Magentic Sensor with the board and detect event. 5. Motion detection (ePir) /example-ePir , this example shows how to connect motion sensor ePir to the board and detect event. 6. Bi-stable relay on board /example-bistable-relay , this example shows how to switch bi-stable relay on board. 7. Temperature & Barometric Pressure Sensor Comming soon GY-BME280... 8. Temperature & Humidity Sensor Comming soon HTU21D... 9. Ambient Light Sensor Comming soon GY49...","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#1-led2-led3-on-board","text":"/example-led23 , this example simple turns on/off RED and GREEN diods on the IQRFBB-10 board. This is first hello world example.","title":"1. LED2, LED3 on board"},{"location":"examples/#2-digital-input","text":"/example-di , this example shows how to detect digital input.","title":"2. Digital Input"},{"location":"examples/#3-digital-output","text":"/example-do , this example shows how to HI/LO digital output. The DO has connected external LED.","title":"3. Digital Output"},{"location":"examples/#4-hall-magnetic-sensor","text":"/example-hall , this example shows how to connect Hall Magentic Sensor with the board and detect event.","title":"4. Hall Magnetic Sensor"},{"location":"examples/#5-motion-detection-epir","text":"/example-ePir , this example shows how to connect motion sensor ePir to the board and detect event.","title":"5. Motion detection (ePir)"},{"location":"examples/#6-bi-stable-relay-on-board","text":"/example-bistable-relay , this example shows how to switch bi-stable relay on board.","title":"6. Bi-stable relay on board"},{"location":"examples/#7-temperature-barometric-pressure-sensor","text":"Comming soon GY-BME280...","title":"7. Temperature &amp; Barometric Pressure Sensor"},{"location":"examples/#8-temperature-humidity-sensor","text":"Comming soon HTU21D...","title":"8. Temperature &amp; Humidity Sensor"},{"location":"examples/#9-ambient-light-sensor","text":"Comming soon GY49...","title":"9. Ambient Light Sensor"},{"location":"examples/example-bistable-relay/","text":"Bi-stable relay This example turns bistable relay on/off. Prerequisities IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example Hardware wiring No hardware wiring needed, bistable relay is managed via C1 and C2 signals. See. Documentation Software We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ14 as DO. EQ14 is Q14/C1/RA0 pin on TR-76DA. Set EQ15 as DO. EQ15 is Q15/C2/RC2 pin on TR-76DA. Set C2=LO, C1=HI Wait 3secs Set C2=HI, C1=LO API JSON message We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 - 00.01.00 Set C1 Output XXXX 09 00 - 02.04.00 Set C2 Output XXXX 09 01 - 00.01.01 Set C1 ON XXXX 09 01 - 00.01.00 Set C1 OFF XXXX 09 01 - 02.04.04 Set C2 ON XXXX 09 01 - 02.04.00 Set C2 OFF NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format. Testing Software The example-bistable-relay.py script. # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-bistable-relay.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" C1_OUT = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [0, 1, 0] }, \"returnVerbose\": True } } C1_ON = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [0, 1, 1] }, \"returnVerbose\": True } } C1_OFF = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [0, 1, 0] }, \"returnVerbose\": True } } C2_OUT = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [2, 4, 0] }, \"returnVerbose\": True } } C2_ON = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 4, 4] }, \"returnVerbose\": True } } C2_OFF = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 4, 0] }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set C1 OUT await websocket.send(json.dumps(C1_OUT)) print(f\"Sent > {C1_OUT}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C2 OUT await websocket.send(json.dumps(C2_OUT)) print(f\"Sent > {C2_OUT}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C2 OFF await websocket.send(json.dumps(C2_OFF)) print(f\"Sent > {C2_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C1 ON await websocket.send(json.dumps(C1_ON)) print(f\"Sent > {C1_ON}\") response = await websocket.recv() print(f\"Received < {response}\") print(\"Waiting 3 secs then reswitch...\") # Wait 3 sec time.sleep(3) # Set C1 OFF await websocket.send(json.dumps(C1_OFF)) print(f\"Sent > {C1_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C2 ON await websocket.send(json.dumps(C2_ON)) print(f\"Sent > {C1_ON}\") response = await websocket.recv() print(f\"Received < {response}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Bi-stable relay"},{"location":"examples/example-bistable-relay/#bi-stable-relay","text":"This example turns bistable relay on/off.","title":"Bi-stable relay"},{"location":"examples/example-bistable-relay/#prerequisities","text":"IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example","title":"Prerequisities"},{"location":"examples/example-bistable-relay/#hardware-wiring","text":"No hardware wiring needed, bistable relay is managed via C1 and C2 signals. See. Documentation","title":"Hardware wiring"},{"location":"examples/example-bistable-relay/#software","text":"We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ14 as DO. EQ14 is Q14/C1/RA0 pin on TR-76DA. Set EQ15 as DO. EQ15 is Q15/C2/RC2 pin on TR-76DA. Set C2=LO, C1=HI Wait 3secs Set C2=HI, C1=LO","title":"Software"},{"location":"examples/example-bistable-relay/#api-json-message","text":"We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 - 00.01.00 Set C1 Output XXXX 09 00 - 02.04.00 Set C2 Output XXXX 09 01 - 00.01.01 Set C1 ON XXXX 09 01 - 00.01.00 Set C1 OFF XXXX 09 01 - 02.04.04 Set C2 ON XXXX 09 01 - 02.04.00 Set C2 OFF NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format.","title":"API JSON message"},{"location":"examples/example-bistable-relay/#testing-software","text":"The example-bistable-relay.py script. # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-bistable-relay.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" C1_OUT = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [0, 1, 0] }, \"returnVerbose\": True } } C1_ON = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [0, 1, 1] }, \"returnVerbose\": True } } C1_OFF = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [0, 1, 0] }, \"returnVerbose\": True } } C2_OUT = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [2, 4, 0] }, \"returnVerbose\": True } } C2_ON = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 4, 4] }, \"returnVerbose\": True } } C2_OFF = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 4, 0] }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set C1 OUT await websocket.send(json.dumps(C1_OUT)) print(f\"Sent > {C1_OUT}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C2 OUT await websocket.send(json.dumps(C2_OUT)) print(f\"Sent > {C2_OUT}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C2 OFF await websocket.send(json.dumps(C2_OFF)) print(f\"Sent > {C2_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C1 ON await websocket.send(json.dumps(C1_ON)) print(f\"Sent > {C1_ON}\") response = await websocket.recv() print(f\"Received < {response}\") print(\"Waiting 3 secs then reswitch...\") # Wait 3 sec time.sleep(3) # Set C1 OFF await websocket.send(json.dumps(C1_OFF)) print(f\"Sent > {C1_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") # Set C2 ON await websocket.send(json.dumps(C2_ON)) print(f\"Sent > {C1_ON}\") response = await websocket.recv() print(f\"Received < {response}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Testing Software"},{"location":"examples/example-di/","text":"Digital Input This example shows how to detect DI on board. We will detect connection EQ13 pin to GRND. DI status is tested by testing software via reading all inputs. Prerequisities IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example Hardware wiring Fig.: IQRFBB10 schema Fig.: External LED wiring Connect EQ13 and GRND pins via button. Software We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ13 as DI. EQ13 is Q13/RE3 pin on TR-76DA. Ask user to press an hold button Wait 3sec Read all DI Parse response and make decision API JSON message We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 10.08.08 Set RE3 (Address E3) as DI XXXX 09 02 FFFF Read all DI pins NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format. Testing Software The example-di.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-di.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" EQ13_IN = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [16, 8, 8] }, \"returnVerbose\": True } } READ_ALL = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 2 }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set C1 OUT await websocket.send(json.dumps(EQ13_IN)) print(f\"Sent > {EQ13_IN}\") response = await websocket.recv() print(f\"Received < {response}\") # Read all pins await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") print(\"Connect EQ13 to GND...\") # Wait 2 sec time.sleep(3) # Read all pins again await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") # Parse JSON response data = json.loads(response) pData = data[\"data\"][\"rsp\"][\"pData\"] button = pData[4] # Check input detection if button == 8: print(f\"Input NOT detected: {button}\") else: print(f\"!!!Input detected: {button}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Digital Input"},{"location":"examples/example-di/#digital-input","text":"This example shows how to detect DI on board. We will detect connection EQ13 pin to GRND. DI status is tested by testing software via reading all inputs.","title":"Digital Input"},{"location":"examples/example-di/#prerequisities","text":"IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example","title":"Prerequisities"},{"location":"examples/example-di/#hardware-wiring","text":"Fig.: IQRFBB10 schema Fig.: External LED wiring Connect EQ13 and GRND pins via button.","title":"Hardware wiring"},{"location":"examples/example-di/#software","text":"We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ13 as DI. EQ13 is Q13/RE3 pin on TR-76DA. Ask user to press an hold button Wait 3sec Read all DI Parse response and make decision","title":"Software"},{"location":"examples/example-di/#api-json-message","text":"We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 10.08.08 Set RE3 (Address E3) as DI XXXX 09 02 FFFF Read all DI pins NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format.","title":"API JSON message"},{"location":"examples/example-di/#testing-software","text":"The example-di.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-di.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" EQ13_IN = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [16, 8, 8] }, \"returnVerbose\": True } } READ_ALL = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 2 }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set C1 OUT await websocket.send(json.dumps(EQ13_IN)) print(f\"Sent > {EQ13_IN}\") response = await websocket.recv() print(f\"Received < {response}\") # Read all pins await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") print(\"Connect EQ13 to GND...\") # Wait 2 sec time.sleep(3) # Read all pins again await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") # Parse JSON response data = json.loads(response) pData = data[\"data\"][\"rsp\"][\"pData\"] button = pData[4] # Check input detection if button == 8: print(f\"Input NOT detected: {button}\") else: print(f\"!!!Input detected: {button}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Testing Software"},{"location":"examples/example-do/","text":"Digital Output This example shows how to set DO on board. We will power EQ6 (X10 SCL) pin. Prerequisities IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example Hardware wiring Fig.: IQRFBB10 schema Fig.: External LED wiring Connect EQ13 and GRN pins via button. Software We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ6 (X10 SCL) as DO. EQ16 is Q6, C6/RC3 genral I/O pin on TR-76DA. Set pin HI Wait 3sec Set pin LO API JSON message We will use DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 02.08.00 Set RC3 (Address C3) as D0 XXXX 09 01 FFFF 02.08.08 Set pin HI XXXX 09 01 FFFF 02.08.00 Set pin LO NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format. Testing Software The example-di.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-do.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" RC3_OUT = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [2, 8, 0] }, \"returnVerbose\": True } } RC3_ON = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 8, 8] }, \"returnVerbose\": True } } RC3_OFF = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 8, 0] }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set RC3 OUT await websocket.send(json.dumps(RC3_OUT)) print(f\"Sent > {RC3_OUT}\") response = await websocket.recv() print(f\"Received < {response}\") # Set RC3 ON await websocket.send(json.dumps(RC3_ON)) print(f\"Sent > {RC3_ON}\") response = await websocket.recv() print(f\"Received < {response}\") print(\"RC3 power ON...\") # Wait 2 sec time.sleep(3) # Read all pins await websocket.send(json.dumps(RC3_OFF)) print(f\"Sent > {RC3_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Digital Output"},{"location":"examples/example-do/#digital-output","text":"This example shows how to set DO on board. We will power EQ6 (X10 SCL) pin.","title":"Digital Output"},{"location":"examples/example-do/#prerequisities","text":"IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example","title":"Prerequisities"},{"location":"examples/example-do/#hardware-wiring","text":"Fig.: IQRFBB10 schema Fig.: External LED wiring Connect EQ13 and GRN pins via button.","title":"Hardware wiring"},{"location":"examples/example-do/#software","text":"We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ6 (X10 SCL) as DO. EQ16 is Q6, C6/RC3 genral I/O pin on TR-76DA. Set pin HI Wait 3sec Set pin LO","title":"Software"},{"location":"examples/example-do/#api-json-message","text":"We will use DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 02.08.00 Set RC3 (Address C3) as D0 XXXX 09 01 FFFF 02.08.08 Set pin HI XXXX 09 01 FFFF 02.08.00 Set pin LO NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format.","title":"API JSON message"},{"location":"examples/example-do/#testing-software","text":"The example-di.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-do.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" RC3_OUT = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [2, 8, 0] }, \"returnVerbose\": True } } RC3_ON = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 8, 8] }, \"returnVerbose\": True } } RC3_OFF = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 1, \"pData\": [2, 8, 0] }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set RC3 OUT await websocket.send(json.dumps(RC3_OUT)) print(f\"Sent > {RC3_OUT}\") response = await websocket.recv() print(f\"Received < {response}\") # Set RC3 ON await websocket.send(json.dumps(RC3_ON)) print(f\"Sent > {RC3_ON}\") response = await websocket.recv() print(f\"Received < {response}\") print(\"RC3 power ON...\") # Wait 2 sec time.sleep(3) # Read all pins await websocket.send(json.dumps(RC3_OFF)) print(f\"Sent > {RC3_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Testing Software"},{"location":"examples/example-ePir/","text":"Motion Sensor (ePir) This example shows how to connect Zilog ePIR \u2013 SparkFub \u2013 SEN-09587 to the board. Prerequisities IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example Hardware wiring Fig.: IQRFBB10 schema Fig.: External LED wiring Connect VO, EQ13 and GRND pins with Zilog ePIR \u2013 SparkFub \u2013 SEN-09587 . Software We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ13 as DI. EQ13 is Q13/RE3 pin on TR-76DA. Read all DI in the loop Parse response and make decision API JSON message We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 10.08.08 Set RE3 (Address E3) as DI XXXX 09 02 FFFF Read all DI pins NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format. Testing Software The example-ePir.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-ePir.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" EQ13_IN = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [16, 8, 8] }, \"returnVerbose\": True } } READ_ALL = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 2 }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set EQ13 IN await websocket.send(json.dumps(EQ13_IN)) print(f\"Sent > {EQ13_IN}\") response = await websocket.recv() print(f\"Received < {response}\") count = 0 detected = False while (count < 20 and detected == False): print (f\"The count is:{count}\") count = count + 1 # Read all pins await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") # Parse JSON response data = json.loads(response) pData = data[\"data\"][\"rsp\"][\"pData\"] button = pData[4] # Check input detection if button == 0: detected = True # Check input detection if detected == False: print(f\"NOTHING detected :(\") else: print(f\"Motion detected!!! :)\") asyncio.get_event_loop().run_until_complete(hello())","title":"Motion Sensor (ePir)"},{"location":"examples/example-ePir/#motion-sensor-epir","text":"This example shows how to connect Zilog ePIR \u2013 SparkFub \u2013 SEN-09587 to the board.","title":"Motion Sensor (ePir)"},{"location":"examples/example-ePir/#prerequisities","text":"IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example","title":"Prerequisities"},{"location":"examples/example-ePir/#hardware-wiring","text":"Fig.: IQRFBB10 schema Fig.: External LED wiring Connect VO, EQ13 and GRND pins with Zilog ePIR \u2013 SparkFub \u2013 SEN-09587 .","title":"Hardware wiring"},{"location":"examples/example-ePir/#software","text":"We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ13 as DI. EQ13 is Q13/RE3 pin on TR-76DA. Read all DI in the loop Parse response and make decision","title":"Software"},{"location":"examples/example-ePir/#api-json-message","text":"We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 10.08.08 Set RE3 (Address E3) as DI XXXX 09 02 FFFF Read all DI pins NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format.","title":"API JSON message"},{"location":"examples/example-ePir/#testing-software","text":"The example-ePir.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-ePir.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" EQ13_IN = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [16, 8, 8] }, \"returnVerbose\": True } } READ_ALL = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 2 }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set EQ13 IN await websocket.send(json.dumps(EQ13_IN)) print(f\"Sent > {EQ13_IN}\") response = await websocket.recv() print(f\"Received < {response}\") count = 0 detected = False while (count < 20 and detected == False): print (f\"The count is:{count}\") count = count + 1 # Read all pins await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") # Parse JSON response data = json.loads(response) pData = data[\"data\"][\"rsp\"][\"pData\"] button = pData[4] # Check input detection if button == 0: detected = True # Check input detection if detected == False: print(f\"NOTHING detected :(\") else: print(f\"Motion detected!!! :)\") asyncio.get_event_loop().run_until_complete(hello())","title":"Testing Software"},{"location":"examples/example-hall/","text":"Hall Magnetic Sensor This example shows how to connect KS0020 Hall Magnetic Sensor with the board. Prerequisities IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example Hardware wiring Fig.: IQRFBB10 schema Fig.: External LED wiring Connect VO, EQ13 and GRND pins with KS0020 Keyestudio Hall Magnetic Sensor . Software We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ13 as DI. EQ13 is Q13/RE3 pin on TR-76DA. Read all DI in the loop Parse response and make decision API JSON message We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 10.08.08 Set RE3 (Address E3) as DI XXXX 09 02 FFFF Read all DI pins NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format. Testing Software The example-di.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-hall.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" EQ13_IN = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [16, 8, 8] }, \"returnVerbose\": True } } READ_ALL = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 2 }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set EQ13 IN await websocket.send(json.dumps(EQ13_IN)) print(f\"Sent > {EQ13_IN}\") response = await websocket.recv() print(f\"Received < {response}\") count = 0 detected = False while (count < 20 and detected == False): print (f\"The count is:{count}\") count = count + 1 # Read all pins await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") # Parse JSON response data = json.loads(response) pData = data[\"data\"][\"rsp\"][\"pData\"] button = pData[4] # Check input detection if button == 0: detected = True # Check input detection if detected == False: print(f\"NOTHING detected :(\") else: print(f\"Input detected!!! :)\") asyncio.get_event_loop().run_until_complete(hello())","title":"Hall Magnetic Sensor"},{"location":"examples/example-hall/#hall-magnetic-sensor","text":"This example shows how to connect KS0020 Hall Magnetic Sensor with the board.","title":"Hall Magnetic Sensor"},{"location":"examples/example-hall/#prerequisities","text":"IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example","title":"Prerequisities"},{"location":"examples/example-hall/#hardware-wiring","text":"Fig.: IQRFBB10 schema Fig.: External LED wiring Connect VO, EQ13 and GRND pins with KS0020 Keyestudio Hall Magnetic Sensor .","title":"Hardware wiring"},{"location":"examples/example-hall/#software","text":"We use Standard DPA handler already loaded in board TR module. Testing software: Set EQ13 as DI. EQ13 is Q13/RE3 pin on TR-76DA. Read all DI in the loop Parse response and make decision","title":"Software"},{"location":"examples/example-hall/#api-json-message","text":"We will use pure DPA messages handled via Daemon JSON API : RawHdp request v1-0-0 , ..example RawHdp response v1-0-0 , ..example DPA commands: NADR PNUM PCMD HWPID PDATA What XXXX 09 00 FFFF 10.08.08 Set RE3 (Address E3) as DI XXXX 09 02 FFFF Read all DI pins NADR: must be your address of IQRFBB-10 in IQRF network. Numbers in table are in hex format.","title":"API JSON message"},{"location":"examples/example-hall/#testing-software","text":"The example-di.py code: # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-hall.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" EQ13_IN = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 0, \"pData\": [16, 8, 8] }, \"returnVerbose\": True } } READ_ALL = { \"mType\": \"iqrfRawHdp\", \"data\": { \"msgId\": \"testRawHdp\", \"req\": { \"nAdr\": boardAddr, \"pNum\": 9, \"pCmd\": 2 }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # Set EQ13 IN await websocket.send(json.dumps(EQ13_IN)) print(f\"Sent > {EQ13_IN}\") response = await websocket.recv() print(f\"Received < {response}\") count = 0 detected = False while (count < 20 and detected == False): print (f\"The count is:{count}\") count = count + 1 # Read all pins await websocket.send(json.dumps(READ_ALL)) print(f\"Sent > {READ_ALL}\") response = await websocket.recv() print(f\"Received < {response}\") # Parse JSON response data = json.loads(response) pData = data[\"data\"][\"rsp\"][\"pData\"] button = pData[4] # Check input detection if button == 0: detected = True # Check input detection if detected == False: print(f\"NOTHING detected :(\") else: print(f\"Input detected!!! :)\") asyncio.get_event_loop().run_until_complete(hello())","title":"Testing Software"},{"location":"examples/example-led23/","text":"Set LED2, LED3 on/off This example turns RED LED on, waits 2 seconds, then turns RED LED off and GREEN LED on, then after 2 seconds turns GREEN LED off. Prerequisities IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example Hardware wiring No hardware wiring needed, both LED2 and LED3 are mounted on the board and connected to C1 and C2. See. Documentation Software We use Standard DPA handler already loaded in board TR module. API JSON message We can manage diods via sending Daemon JSON API messages. LD2 (Green DIOD) ON/OFF Set LEDG request v1-0-0 , ..example Set LEDG response v1-0-0 , ..example LD3 (Red DIOD) ON/OFF Set LEDR request v1-0-0 , ..example Set LEDR response v1-0-0 , ..example Testing Software The example-led23.py script also prints sent and received JSON messages # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-led23.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" LEDR_ON = { \"mType\": \"iqrfEmbedLedr_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": True } }, \"returnVerbose\": True } } LEDR_OFF = { \"mType\": \"iqrfEmbedLedr_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": False } }, \"returnVerbose\": True } } LEDG_ON = { \"mType\": \"iqrfEmbedLedg_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": True } }, \"returnVerbose\": True } } LEDG_OFF = { \"mType\": \"iqrfEmbedLedg_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": False } }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # RED LED ON await websocket.send(json.dumps(LEDR_ON)) print(f\"Sent > {LEDR_ON}\") response = await websocket.recv() print(f\"Received < {response}\") # Wait 2 sec time.sleep(2) # RED LED OFF await websocket.send(json.dumps(LEDR_OFF)) print(f\"Sent > {LEDR_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") # GREEN LED ON await websocket.send(json.dumps(LEDG_ON)) print(f\"Sent > {LEDG_ON}\") response = await websocket.recv() print(f\"Received < {response}\") # Wait 2 sec time.sleep(2) # GREEN LED OFF await websocket.send(json.dumps(LEDG_OFF)) print(f\"Sent > {LEDG_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Set LED2, LED3 on/off"},{"location":"examples/example-led23/#set-led2-led3-onoff","text":"This example turns RED LED on, waits 2 seconds, then turns RED LED off and GREEN LED on, then after 2 seconds turns GREEN LED off.","title":"Set LED2, LED3 on/off"},{"location":"examples/example-led23/#prerequisities","text":"IQRFBB-10 bonded in working IQRF network. More in GettingStarted with IQRFBB-10 IQRF Gateway Daemon running. More in IQRF Gateway Daemon Python 3.6 with WebSockets module . More in Python 3.6 WbSockets example","title":"Prerequisities"},{"location":"examples/example-led23/#hardware-wiring","text":"No hardware wiring needed, both LED2 and LED3 are mounted on the board and connected to C1 and C2. See. Documentation","title":"Hardware wiring"},{"location":"examples/example-led23/#software","text":"We use Standard DPA handler already loaded in board TR module.","title":"Software"},{"location":"examples/example-led23/#api-json-message","text":"We can manage diods via sending Daemon JSON API messages. LD2 (Green DIOD) ON/OFF Set LEDG request v1-0-0 , ..example Set LEDG response v1-0-0 , ..example LD3 (Red DIOD) ON/OFF Set LEDR request v1-0-0 , ..example Set LEDR response v1-0-0 , ..example","title":"API JSON message"},{"location":"examples/example-led23/#testing-software","text":"The example-led23.py script also prints sent and received JSON messages # # Copyright 2018 Logimic,s.r.o. # www.logimic.com # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Websockets example-led23.py import asyncio import websockets import json import time # This is IQRFBB-10 node address in IQRF network boardAddr = 3 # JSON messages by \"https://docs.iqrfsdk.org/iqrf-gateway-daemon/api.html\" LEDR_ON = { \"mType\": \"iqrfEmbedLedr_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": True } }, \"returnVerbose\": True } } LEDR_OFF = { \"mType\": \"iqrfEmbedLedr_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": False } }, \"returnVerbose\": True } } LEDG_ON = { \"mType\": \"iqrfEmbedLedg_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": True } }, \"returnVerbose\": True } } LEDG_OFF = { \"mType\": \"iqrfEmbedLedg_Set\", \"data\": { \"msgId\": \"testEmbedLedr\", \"req\": { \"nAdr\": boardAddr, \"param\": { \"onOff\": False } }, \"returnVerbose\": True } } async def hello(): # Connect websockets async with websockets.connect( 'ws://localhost:1338') as websocket: # RED LED ON await websocket.send(json.dumps(LEDR_ON)) print(f\"Sent > {LEDR_ON}\") response = await websocket.recv() print(f\"Received < {response}\") # Wait 2 sec time.sleep(2) # RED LED OFF await websocket.send(json.dumps(LEDR_OFF)) print(f\"Sent > {LEDR_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") # GREEN LED ON await websocket.send(json.dumps(LEDG_ON)) print(f\"Sent > {LEDG_ON}\") response = await websocket.recv() print(f\"Received < {response}\") # Wait 2 sec time.sleep(2) # GREEN LED OFF await websocket.send(json.dumps(LEDG_OFF)) print(f\"Sent > {LEDG_OFF}\") response = await websocket.recv() print(f\"Received < {response}\") asyncio.get_event_loop().run_until_complete(hello())","title":"Testing Software"}]}